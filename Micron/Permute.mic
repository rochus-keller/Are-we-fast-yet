(* This code is derived from the SOM benchmarks, see AUTHORS.md file.
 *
 * Copyright (c) 2024 Rochus Keller <me@rochus-keller.ch> (for Micron migration)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the 'Software'), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *)
 
module Permute
 
import B := Benchmark

type 
	Permute = record
				base: B.Benchmark
				count: integer
				v: pointer to array of integer
			end
			
	proc swap(me: ^Permute; i,j: integer)
	var tmp: integer
	begin
		tmp := me.v[i]
		me.v[i] := me.v[j]
		me.v[j] := tmp
	end swap
	
	proc permute(me: ^Permute; n: integer)
	var n1, i: integer
	begin
		inc(me.count)
		if n # 0 then
		    n1 := n - 1
		    permute(me, n1)
		    for i := n1 to 0 by -1 do
		        swap(me, n1, i)
		        permute(me, n1)
		        swap(me, n1, i)
		    end
		end
    end permute
    
    proc benchmark(me: ^B.Benchmark): integer
    var p: ^Permute; i: integer
	begin
	    p := me(Permute)
		p.count := 0
		new(p.v, 6)
		permute(p,6)
		dispose(p.v)
		return p.count
	end benchmark
	
	proc verifyResult(me: ^B.Benchmark; result: integer): boolean
	begin
  		return result = 8660
	end verifyResult

	proc create*(): ^B.Benchmark
	var per: ^Permute
	begin
		new(per)
		per.base.benchmark := benchmark
		per.base.verifyResult := verifyResult
		per.base.dispose := nil
		per.base.innerBenchmarkLoop := nil
		return per
   	end create

 end Permute
